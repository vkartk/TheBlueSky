// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheBlueSky.Flights.Models;

#nullable disable

namespace TheBlueSky.Flights.Migrations
{
    [DbContext(typeof(FlightsDbContext))]
    partial class FlightsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheBlueSky.Flights.Models.Aircraft", b =>
                {
                    b.Property<int>("AircraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftId"));

                    b.Property<string>("AircraftModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AircraftName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BusinessSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EconomySeats")
                        .HasColumnType("int");

                    b.Property<int>("FirstClassSeats")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("int");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.HasKey("AircraftId");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.AircraftSeat", b =>
                {
                    b.Property<int>("AircraftSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftSeatId"));

                    b.Property<decimal>("AdditionalFare")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SeatClassId")
                        .HasColumnType("int");

                    b.Property<int>("SeatColumn")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SeatPosition")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int");

                    b.HasKey("AircraftSeatId");

                    b.HasIndex("AircraftId");

                    b.HasIndex("SeatClassId");

                    b.ToTable("AircraftSeats");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirportId"));

                    b.Property<string>("AirportCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AirportId");

                    b.HasIndex("CountryId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Country", b =>
                {
                    b.Property<string>("CountryID")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<DateTimeOffset>("ArrivalDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DepartureDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("FlightDate")
                        .HasColumnType("date");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("FlightStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("FlightId");

                    b.HasIndex("FlightScheduleId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.FlightSchedule", b =>
                {
                    b.Property<int>("FlightScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightScheduleId"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<decimal>("BaseFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CabinBaggageWeightKg")
                        .HasColumnType("int");

                    b.Property<int>("CheckinBaggageWeightKg")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<string>("FlightName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ValidFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ValidUntil")
                        .HasColumnType("date");

                    b.HasKey("FlightScheduleId");

                    b.HasIndex("AircraftId");

                    b.HasIndex("RouteId");

                    b.ToTable("FlightSchedules");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.FlightSeatStatus", b =>
                {
                    b.Property<int>("FlightSeatStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightSeatStatusId"));

                    b.Property<int>("AircraftSeatId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("SeatStatus")
                        .HasColumnType("int");

                    b.HasKey("FlightSeatStatusId");

                    b.HasIndex("AircraftSeatId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightSeatStatuses");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<int>("DestinationAirportId")
                        .HasColumnType("int");

                    b.Property<int>("DistanceKm")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OriginAirportId")
                        .HasColumnType("int");

                    b.HasKey("RouteId");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("OriginAirportId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.ScheduleDay", b =>
                {
                    b.Property<int>("ScheduleDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleDayId"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleDayId");

                    b.HasIndex("FlightScheduleId");

                    b.ToTable("ScheduleDays");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.SeatClass", b =>
                {
                    b.Property<int>("SeatClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatClassId"));

                    b.Property<string>("ClassDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PriorityOrder")
                        .HasColumnType("int");

                    b.HasKey("SeatClassId");

                    b.ToTable("SeatClasses");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.AircraftSeat", b =>
                {
                    b.HasOne("TheBlueSky.Flights.Models.Aircraft", "Aircraft")
                        .WithMany("Seats")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBlueSky.Flights.Models.SeatClass", "SeatClass")
                        .WithMany("Seats")
                        .HasForeignKey("SeatClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("SeatClass");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Airport", b =>
                {
                    b.HasOne("TheBlueSky.Flights.Models.Country", "Country")
                        .WithMany("Airports")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Flight", b =>
                {
                    b.HasOne("TheBlueSky.Flights.Models.FlightSchedule", "Schedule")
                        .WithMany("Flights")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.FlightSchedule", b =>
                {
                    b.HasOne("TheBlueSky.Flights.Models.Aircraft", "Aircraft")
                        .WithMany("Schedules")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBlueSky.Flights.Models.Route", "Route")
                        .WithMany("FlightSchedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.FlightSeatStatus", b =>
                {
                    b.HasOne("TheBlueSky.Flights.Models.AircraftSeat", "AircraftSeat")
                        .WithMany("FlightSeatStatuses")
                        .HasForeignKey("AircraftSeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheBlueSky.Flights.Models.Flight", "Flight")
                        .WithMany("SeatStatuses")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AircraftSeat");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Route", b =>
                {
                    b.HasOne("TheBlueSky.Flights.Models.Airport", "DestinationAirport")
                        .WithMany("DestinationRoutes")
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheBlueSky.Flights.Models.Airport", "OriginAirport")
                        .WithMany("OriginRoutes")
                        .HasForeignKey("OriginAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationAirport");

                    b.Navigation("OriginAirport");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.ScheduleDay", b =>
                {
                    b.HasOne("TheBlueSky.Flights.Models.FlightSchedule", "Schedule")
                        .WithMany("Days")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Aircraft", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.AircraftSeat", b =>
                {
                    b.Navigation("FlightSeatStatuses");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Airport", b =>
                {
                    b.Navigation("DestinationRoutes");

                    b.Navigation("OriginRoutes");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Country", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Flight", b =>
                {
                    b.Navigation("SeatStatuses");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.FlightSchedule", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Flights");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.Route", b =>
                {
                    b.Navigation("FlightSchedules");
                });

            modelBuilder.Entity("TheBlueSky.Flights.Models.SeatClass", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
